name: Release
on:
    push:
        branches:
            - main
            - dev
            - develop
    pull_request:
        branches:
            - main
env:
    FORCE_COLOR: true
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    REPO: bestcordofficial/Bestcord
    USERNAME: GitHub-Actions

permissions: write-all

jobs:
    Build:
        name: Build BestCord
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v3

            - name: Use Node.js 20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: Build web
              run: pnpm buildWebStandalone

            - name: Build web minified
              run: pnpm buildWeb --minify

            - name: Build desktop
              run: pnpm buildStandalone

            - name: Build desktop minified
              run: pnpm build --minify

            - name: Generate plugin list
              run: pnpm generatePluginJson dist/plugins.json

            - name: Generate Equicord plugin list
              run: pnpm generateEquicordPluginJson dist/equicordplugins.json

            - name: Create browser extensions packages
              run: |
                  cd dist
                  # Créer des packages pour les extensions navigateur
                  if [ -d "browser" ]; then
                    cd browser
                    zip -r ../BestCord-Browser-Extension.zip .
                    cd ..
                  fi

            - name: Collect files to be released
              run: |
                  cd dist
                  mkdir -p release

                  # Extensions navigateur
                  if [ -d "browser" ]; then
                    cp browser/browser.* release/ 2>/dev/null || true
                    cp browser/*.js release/ 2>/dev/null || true
                  fi

                  # Userscripts
                  cp Vencord.user.{js,js.LEGAL.txt} release/ 2>/dev/null || true

                  # Desktop builds
                  cp *.asar release/ 2>/dev/null || true
                  
                  # Plugin data
                  cp *.json release/ 2>/dev/null || true
                  
                  # Extensions empaquetées
                  cp *.zip release/ 2>/dev/null || true

                  # Desktop files avec noms explicites
                  if [ -d "desktop" ]; then
                    for file in desktop/*; do
                      if [ -f "$file" ]; then
                        filename=$(basename "$file")
                        cp "$file" "release/BestCord-Desktop-${filename}"
                      fi
                    done
                  fi

                  # Equibop/mobile files
                  if [ -d "equibop" ]; then
                    for file in equibop/*; do
                      if [ -f "$file" ]; then
                        filename=$(basename "$file")
                        cp "$file" "release/BestCord-Equibop-${filename^}"
                      fi
                    done
                  fi

                  # Créer des versions avec horodatage
                  timestamp=$(date +%Y%m%d-%H%M%S)
                  for file in release/*.js; do
                    if [ -f "$file" ]; then
                      basename_file=$(basename "$file" .js)
                      cp "$file" "release/${basename_file}-${timestamp}.js"
                    fi
                  done

                  # Nettoyer les fichiers vides et indésirables
                  find release -size 0 -delete 2>/dev/null || true
                  rm -f release/package.json release/*.map 2>/dev/null || true

            - name: Create checksums
              run: |
                  cd dist/release
                  sha256sum * > checksums.txt

            - name: Upload BestCord Release Assets
              if: ${{ github.event_name == 'push' }}
              run: |
                  # Créer ou mettre à jour la release
                  if [[ "${{ github.ref_name }}" == "main" ]]; then
                    release_tag="latest"
                    release_title="BestCord Latest - Build #${{ github.run_number }}"
                    prerelease="false"
                  elif [[ "${{ github.ref_name }}" == "dev" || "${{ github.ref_name }}" == "develop" ]]; then
                    release_tag="dev-latest"
                    release_title="BestCord Dev Build #${{ github.run_number }}"
                    prerelease="true"
                  else
                    release_tag="${{ github.ref_name }}-latest"
                    release_title="BestCord ${{ github.ref_name }} - Build #${{ github.run_number }}"
                    prerelease="true"
                  fi

                  # Créer la release si elle n'existe pas
                  gh release create "$release_tag" \
                    --title "$release_title" \
                    --notes "Build automatique de BestCord - The other cutest Discord client mod
                    
                    **Commit:** ${{ github.sha }}
                    **Branche:** ${{ github.ref_name }}
                    **Build #:** ${{ github.run_number }}
                    **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
                    
                    ## Assets inclus:
                    - Extensions navigateur (.zip)
                    - Applications desktop (.asar)
                    - Userscripts (.js)
                    - Données plugins (.json)
                    - Checksums de vérification" \
                    --prerelease="$prerelease" \
                    || true

                  # Upload tous les assets
                  gh release upload "$release_tag" --clobber dist/release/*

            - name: Upload Plugins JSON to external repo (optional)
              if: ${{ env.REPO != 'bestcordofficial/Bestcord' }}
              run: |
                  git config --global user.name "GitHub-Actions"
                  git config --global user.email actions@github.com
                  git clone https://$USERNAME:$GITHUB_TOKEN@github.com/$REPO.git plugins
                  cd plugins

                  cp ../dist/release/*plugins.json .
                  git add -A

                  git commit -m "Plugins for https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" || true
                  git push https://$USERNAME:$GITHUB_TOKEN@github.com/$REPO.git || true
